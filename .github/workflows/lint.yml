name: Lint

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  clippy:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac

      - name: Get nightly version to use
        id: nightly
        shell: bash
        run: echo "version=$(cat .github/nightly-version)" >> $GITHUB_OUTPUT

      - name: Build Dependencies
        uses: ./.github/actions/build-dependencies

      - name: Install nightly rust
        run: rustup toolchain install ${{ steps.nightly.outputs.version }} --profile minimal -c clippy

      - name: Run Clippy
        run: cargo +${{ steps.nightly.outputs.version }} clippy --all-features --all-targets -- -D warnings -A clippy::items_after_test_module

      # Also verify the lockfile isn't dirty
      # This happens when someone edits a Cargo.toml yet doesn't do anything
      # which causes the lockfile to be updated
      # The above clippy run will cause it to be updated, so checking there's
      # no differences present now performs the desired check
      - name: Verify lockfile
        shell: bash
        run: git diff | wc -l | LC_ALL="en_US.utf8" grep -x -e "^[ ]*0"

  deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac

      - name: Advisory Cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.cargo/advisory-db
          key: rust-advisory-db

      - name: Install cargo deny
        run: cargo +1.89 install cargo-deny --version =0.18.3

      - name: Run cargo deny
        run: cargo deny -L error --all-features check --hide-inclusion-graph

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac

      - name: Get nightly version to use
        id: nightly
        shell: bash
        run: echo "version=$(cat .github/nightly-version)" >> $GITHUB_OUTPUT

      - name: Install nightly rust
        run: rustup toolchain install ${{ steps.nightly.outputs.version }} --profile minimal -c rustfmt

      - name: Run rustfmt
        run: cargo +${{ steps.nightly.outputs.version }} fmt -- --check

  machete:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: Verify all dependencies are in use
        run: |
          cargo +1.89 install cargo-machete --version =0.8.0
          cargo +1.89 machete

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: Verify claimed `rust-version`
        shell: bash
        run: |
          cargo +1.89 install cargo-msrv --version =0.18.4

          check_msrv() {
            # Find the existing rust-version
            existing=$(cat ./Cargo.toml | grep "rust-version" | grep -Eo "[0-9]+\.[0-9]+")

            # Remove it from the Cargo.toml, as required because else earlier versions of Rust won't
            # even try to compile this crate.
            #
            # echo is needed as a buffer, else we immediately overwrite Cargo.toml and read nothing.
            # The quotes are to preserve the newlines, which would otherwise be stripped out.
            echo "$(cat ./Cargo.toml | grep -v "rust-version")" > Cargo.toml

            # Find the actual rust-version
            actual=$(cargo msrv find --output-format minimal | grep -Eo "^[0-9]+\.[0-9]+")

            # Compare them
            [ $existing == $actual ]

            # Return if they're equal or not
            return $?
          }

          # Run `check_msrv` for every crate within monero-oxide
          # This on purposely checks from the bottom to the top, as to not flag a higher-level
          # dependency as having the correct MSRV solely because a dependency incorrectly specified
          # its MSRV

          cd monero-oxide

          cd generators
          check_msrv # monero-generators
          cd ../io
          check_msrv # monero-io
          cd ../primitives
          check_msrv # monero-primitives
          cd ..

          cd ringct
          cd borromean
          check_msrv # monero-borromean
          cd ../bulletproofs
          check_msrv # monero-bulletproofs
          cd ../mlsag
          check_msrv # monero-mlsag
          cd ../clsag
          check_msrv # monero-clsag
          cd ../..

          check_msrv # monero-oxide
          cd rpc
          check_msrv # monero-rpc
          cd ../

          cd wallet

          cd address
          check_msrv # monero-address
          cd ..
          check_msrv # monero-wallet
